import os
from fabric import Connection
from jinja2 import Environment, PackageLoader, FileSystemLoader

jin_env = Environment(loader=FileSystemLoader('./'))


def render_template(tmpl_path, context):
    path, fname = os.path.split(tmpl_path)

    special_str = "template_"
    assert fname.startswith(special_str) and (fname.count(special_str) == 1) and len(fname) > len(special_str)
    res_fname = fname.replace(special_str, "")

    template = jin_env.get_template(tmpl_path)
    context["warning"] = "This file was autogenerated from the template: {}".format(fname)
    result = template.render(context=context)

    target_path = os.path.join(path, res_fname)

    if 1:
        with open(target_path, "w") as resfile:
            resfile.write(result)

    else:
        print(target_path, "\n"*2, result)


class StateConnection(object):
    """
    Wrapper class for fabric connection which remembers the working directory.
    """

    def __init__(self, remote, user):
        self._c = Connection(remote, user)
        self.dir = None

    def chdir(self, path):
        """
        The following works on uberspace:

        c.chdir("etc")
        c.chdir("~")
        c.chdir("$HOME")

        :param path:
        :return:
        """

        if path is None:
            self.dir = None
            return

        cmd = "cd {} && pwd".format(path)
        res = self.run(cmd, hide=True, warn=True)

        if res.exited != 0:
            print("Could not change directory. Error message: {}".format(res.stderr))
        else:
            # store the result of pwd in the variable
            self.dir = res.stdout.strip()

    def run(self, cmd, use_dir=True, hide=False, warn=False, printonly=False):
        """

        :param cmd:
        :param use_dir:
        :param hide:        see docs of invoke
        :param warn:        see docs of invoke
        :return:
        """

        if use_dir and self.dir is not None:
            cmd = "cd {}; {}".format(self.dir, cmd)

        if not printonly:
            res = self._c.run(cmd, hide=hide, warn=warn)
        else:
            print("->:", cmd)
            res = None
        return res
